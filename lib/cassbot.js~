'use strict';

var util = require('util');
var path = require('path');
var fs = require('fs');
var SQLite = require('sqlite3').verbose();
var Bot = require('slackbots');
var PriceListener = require('../lib/pricelistener');

/**
 * Constructor function. It accepts a settings object which should contain the following keys:
 *      token : the API token of the bot (mandatory)
 *      name : the name of the bot (will default to "cassbot")
 *      dbPath : the path to access the database (will default to "data/cassbot.db")
 *
 * @param {object} settings
 * @constructor
 *
 * @author Luciano Mammino <lucianomammino@gmail.com>
 */
var CassBot = function Constructor(settings) {
    this.settings = settings;
    this.settings.name = this.settings.name || 'cassbot';
    this.dbPath = settings.dbPath || path.resolve(__dirname, '..', 'data', 'cassbot.db');

    this.user = null;
    this.db = null;
};

// inherits methods and properties from the Bot constructor
util.inherits(CassBot, Bot);

/**
 * Run the bot
 * @public
 */
CassBot.prototype.run = function () {
    CassBot.super_.call(this, this.settings);

    this.on('start', this._onStart);
    this.on('message', this._onMessage);
};

/**
 * On Start callback, called when the bot connects to the Slack server and access the channel
 * @private
 */
CassBot.prototype._onStart = function () {
    this._loadBotUser();
    this._connectDb();
};

/**
 * On message callback, called when a message (of any type) is detected with the real time messaging API
 * @param {object} message
 * @private
 */
CassBot.prototype._onMessage = function (message) {
    console.log(message);
    if (this._isPriceCheck(message)
    ) {
        this._priceCheck(message);
    }
};

/**
 * Replyes to a message with a random Joke
 * @param {object} originalMessage
 * @private
 */
CassBot.prototype._priceCheck = function (originalMessage) {
    var out = PriceListener.get('wuzzle');
    var channel = this._getChannelById(originalMessage.channel);
    this.postMessageToChannel(channel.name, out, {as_user: true});
};

/**
 * Loads the user object representing the bot
 * @private
 */
CassBot.prototype._loadBotUser = function () {
    var self = this;
    this.user = this.users.filter(function (user) {
        return user.name === self.name;
    })[0];
};

/**
 * Open connection to the db
 * @private
 */
CassBot.prototype._connectDb = function () {
    if (!fs.existsSync(this.dbPath)) {
        console.error('Database path ' + '"' + this.dbPath + '" does not exists or it\'s not readable.');
        process.exit(1);
    }

    this.db = new SQLite.Database(this.dbPath);
    this.db.serialize();
    this.db.run('CREATE TABLE IF NOT EXISTS info (name TEXT PRIMARY KEY, val TEXT DEFAULT NULL)');
};

/**
 * Sends a welcome message in the channel
 * @private
 */
CassBot.prototype._welcomeMessage = function () {
    this.postMessageToChannel(this.channels[0].name,
			      'meow',{as_user: true});
};

/**
 * Util function to check if a given real time message object represents a chat message
 * @param {object} message
 * @returns {boolean}
 * @private
 */
CassBot.prototype._isChatMessage = function (message) {
    return message.type === 'message' && Boolean(message.text);
};

/**
 * Util function to check if a given real time message object is directed to a channel
 * @param {object} message
 * @returns {boolean}
 * @private
 */
CassBot.prototype._isChannelConversation = function (message) {
    return typeof message.channel === 'string' &&
        message.channel[0] === 'C'
        ;
};

CassBot.prototype._isPriceCheck = function (message) {
    return Boolean(message.text) && message.text.toLowerCase().indexOf('!jitaprice') > -1;
};

/**
 * Util function to check if a given real time message has ben sent by the cassbot
 * @param {object} message
 * @returns {boolean}
 * @private
 */
CassBot.prototype._isFromCassBot = function (message) {
    return message.user === this.user.id;
};

/**
 * Util function to get the name of a channel given its id
 * @param {string} channelId
 * @returns {Object}
 * @private
 */
CassBot.prototype._getChannelById = function (channelId) {
    return this.channels.filter(function (item) {
        return item.id === channelId;
    })[0];
};

module.exports = CassBot;
